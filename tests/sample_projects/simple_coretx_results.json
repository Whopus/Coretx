{
  "directory_analysis": {
    "success": true,
    "result": {
      "directory_path": "/workspace/coretx_test_project",
      "files_processed": 7,
      "files_failed": 0,
      "total_entities": 387,
      "language_stats": {
        "python": 6,
        "markdown": 37,
        "text": 2,
        "bash": 1
      },
      "entity_types": {
        "file": 7,
        "import": 56,
        "class": 15,
        "method": 56,
        "variable": 199,
        "function": 15,
        "heading": 19,
        "code_block": 3,
        "text_section": 17
      },
      "supported_extensions": [
        ".pyw",
        ".py",
        ".pyi",
        ".js",
        ".jsx",
        ".ts",
        ".mjs",
        ".tsx",
        ".mdown",
        ".mkd",
        ".markdown",
        ".md",
        ".html",
        ".xhtml",
        ".htm",
        ".scss",
        ".sass",
        ".css",
        ".less"
      ]
    },
    "duration": 0.031193971633911133
  },
  "file_parsing": {
    "sample_app.py": {
      "success": true,
      "result": {
        "file_path": "/workspace/coretx_test_project/sample_app.py",
        "entities_found": 69,
        "entities": [
          {
            "name": "sample_app.py",
            "type": "file",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 1,
            "line_end": 297,
            "metadata": {
              "language": "python",
              "size": 9939
            },
            "content": "\"\"\"\nSample application for testing Coretx code localization.\nThis is a simple web application with authentication and user management.\n\"\"\"\n\nimport hashlib\nimport json\nimport sqlite3\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\n\n\nclass DatabaseManager:\n    \"\"\"Handles database operations for the application.\"\"\"\n    \n    def __init__(self, db_path: str = \"app.db\"):\n        self.db_path = db_path\n        self.init_database()\n    \n    def init_database(self):\n     ...",
            "docstring": null
          },
          {
            "name": "hashlib",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 6,
            "line_end": 6,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import hashlib",
            "docstring": null
          },
          {
            "name": "json",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 7,
            "line_end": 7,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import json",
            "docstring": null
          },
          {
            "name": "sqlite3",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 8,
            "line_end": 8,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import sqlite3",
            "docstring": null
          },
          {
            "name": "datetime.datetime",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "datetime",
              "name": "datetime",
              "alias": null,
              "type": "from_import"
            },
            "content": "from datetime import datetime, timedelta",
            "docstring": null
          },
          {
            "name": "datetime.timedelta",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "datetime",
              "name": "timedelta",
              "alias": null,
              "type": "from_import"
            },
            "content": "from datetime import datetime, timedelta",
            "docstring": null
          },
          {
            "name": "typing.Dict",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 10,
            "line_end": 10,
            "metadata": {
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "typing.List",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 10,
            "line_end": 10,
            "metadata": {
              "module": "typing",
              "name": "List",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "typing.Optional",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 10,
            "line_end": 10,
            "metadata": {
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "DatabaseManager",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 13,
            "line_end": 54,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class DatabaseManager:\n    \"\"\"Handles database operations for the application.\"\"\"\n    \n    def __init__(self, db_path: str = \"app.db\"):\n        self.db_path = db_path\n        self.init_database()\n    \n    def init_database(self):\n        \"\"\"Initialize the database with required tables.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        \n        # Users table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                email TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                is_active BOOLEAN DEFAULT TRUE\n            )\n        \"\"\")\n        \n        # Sessions table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS sessions (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                user_id INTEGER NOT ...",
            "docstring": "Handles database operations for the application."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 16,
            "line_end": 18,
            "metadata": {
              "args": [
                "self",
                "db_path"
              ],
              "decorators": [],
              "class": "DatabaseManager"
            },
            "content": "    def __init__(self, db_path: str = \"app.db\"):\n        self.db_path = db_path\n        self.init_database()",
            "docstring": null
          },
          {
            "name": "init_database",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 20,
            "line_end": 50,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "DatabaseManager"
            },
            "content": "    def init_database(self):\n        \"\"\"Initialize the database with required tables.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        \n        # Users table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                email TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                is_active BOOLEAN DEFAULT TRUE\n            )\n        \"\"\")\n        \n        # Sessions table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS sessions (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                user_id INTEGER NOT NULL,\n                session_token TEXT UNIQUE NOT NULL,\n                expires_at TIMESTAMP NOT NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (use...",
            "docstring": "Initialize the database with required tables."
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 22,
            "line_end": 22,
            "metadata": {
              "class": "DatabaseManager",
              "type": "sqlite3.connect"
            },
            "content": "        conn = sqlite3.connect(self.db_path)",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 23,
            "line_end": 23,
            "metadata": {
              "class": "DatabaseManager",
              "type": "conn.cursor"
            },
            "content": "        cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "get_connection",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 52,
            "line_end": 54,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "DatabaseManager"
            },
            "content": "    def get_connection(self):\n        \"\"\"Get a database connection.\"\"\"\n        return sqlite3.connect(self.db_path)",
            "docstring": "Get a database connection."
          },
          {
            "name": "PasswordManager",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 57,
            "line_end": 70,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class PasswordManager:\n    \"\"\"Handles password hashing and verification.\"\"\"\n    \n    @staticmethod\n    def hash_password(password: str) -> str:\n        \"\"\"Hash a password using SHA-256.\"\"\"\n        # Note: This is a simplified example. In production, use bcrypt or similar.\n        salt = \"app_salt_2024\"\n        return hashlib.sha256((password + salt).encode()).hexdigest()\n    \n    @staticmethod\n    def verify_password(password: str, password_hash: str) -> bool:\n        \"\"\"Verify a password against its hash.\"\"\"\n        return PasswordManager.hash_password(password) == password_hash",
            "docstring": "Handles password hashing and verification."
          },
          {
            "name": "hash_password",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 61,
            "line_end": 65,
            "metadata": {
              "args": [
                "password"
              ],
              "decorators": [
                "staticmethod"
              ],
              "class": "PasswordManager"
            },
            "content": "    def hash_password(password: str) -> str:\n        \"\"\"Hash a password using SHA-256.\"\"\"\n        # Note: This is a simplified example. In production, use bcrypt or similar.\n        salt = \"app_salt_2024\"\n        return hashlib.sha256((password + salt).encode()).hexdigest()",
            "docstring": "Hash a password using SHA-256."
          },
          {
            "name": "salt",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 64,
            "line_end": 64,
            "metadata": {
              "class": "PasswordManager",
              "type": "str"
            },
            "content": "        salt = \"app_salt_2024\"",
            "docstring": null
          },
          {
            "name": "verify_password",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 68,
            "line_end": 70,
            "metadata": {
              "args": [
                "password",
                "password_hash"
              ],
              "decorators": [
                "staticmethod"
              ],
              "class": "PasswordManager"
            },
            "content": "    def verify_password(password: str, password_hash: str) -> bool:\n        \"\"\"Verify a password against its hash.\"\"\"\n        return PasswordManager.hash_password(password) == password_hash",
            "docstring": "Verify a password against its hash."
          },
          {
            "name": "SessionManager",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 73,
            "line_end": 122,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class SessionManager:\n    \"\"\"Manages user sessions and authentication tokens.\"\"\"\n    \n    def __init__(self, db_manager: DatabaseManager):\n        self.db_manager = db_manager\n    \n    def create_session(self, user_id: int) -> str:\n        \"\"\"Create a new session for a user.\"\"\"\n        import secrets\n        \n        session_token = secrets.token_urlsafe(32)\n        expires_at = datetime.now() + timedelta(hours=24)\n        \n        conn = self.db_manager.get_connection()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"\"\"\n            INSERT INTO sessions (user_id, session_token, expires_at)\n            VALUES (?, ?, ?)\n        \"\"\", (user_id, session_token, expires_at))\n        \n        conn.commit()\n        conn.close()\n        \n        return session_token\n    \n    def validate_session(self, session_token: str) -> Optional[int]:\n        \"\"\"Validate a session token and return user_id if valid.\"\"\"\n        conn = self.db_manager.get_connection()\n        cursor = conn.curso...",
            "docstring": "Manages user sessions and authentication tokens."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 76,
            "line_end": 77,
            "metadata": {
              "args": [
                "self",
                "db_manager"
              ],
              "decorators": [],
              "class": "SessionManager"
            },
            "content": "    def __init__(self, db_manager: DatabaseManager):\n        self.db_manager = db_manager",
            "docstring": null
          },
          {
            "name": "create_session",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 79,
            "line_end": 97,
            "metadata": {
              "args": [
                "self",
                "user_id"
              ],
              "decorators": [],
              "class": "SessionManager"
            },
            "content": "    def create_session(self, user_id: int) -> str:\n        \"\"\"Create a new session for a user.\"\"\"\n        import secrets\n        \n        session_token = secrets.token_urlsafe(32)\n        expires_at = datetime.now() + timedelta(hours=24)\n        \n        conn = self.db_manager.get_connection()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"\"\"\n            INSERT INTO sessions (user_id, session_token, expires_at)\n            VALUES (?, ?, ?)\n        \"\"\", (user_id, session_token, expires_at))\n        \n        conn.commit()\n        conn.close()\n        \n        return session_token",
            "docstring": "Create a new session for a user."
          },
          {
            "name": "secrets",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 81,
            "line_end": 81,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "        import secrets",
            "docstring": null
          },
          {
            "name": "session_token",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 83,
            "line_end": 83,
            "metadata": {
              "class": "SessionManager",
              "type": "secrets.token_urlsafe"
            },
            "content": "        session_token = secrets.token_urlsafe(32)",
            "docstring": null
          },
          {
            "name": "expires_at",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 84,
            "line_end": 84,
            "metadata": {
              "class": "SessionManager",
              "type": "unknown"
            },
            "content": "        expires_at = datetime.now() + timedelta(hours=24)",
            "docstring": null
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 86,
            "line_end": 86,
            "metadata": {
              "class": "SessionManager",
              "type": "self.db_manager.get_connection"
            },
            "content": "        conn = self.db_manager.get_connection()",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 87,
            "line_end": 87,
            "metadata": {
              "class": "SessionManager",
              "type": "conn.cursor"
            },
            "content": "        cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "validate_session",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 99,
            "line_end": 112,
            "metadata": {
              "args": [
                "self",
                "session_token"
              ],
              "decorators": [],
              "class": "SessionManager"
            },
            "content": "    def validate_session(self, session_token: str) -> Optional[int]:\n        \"\"\"Validate a session token and return user_id if valid.\"\"\"\n        conn = self.db_manager.get_connection()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"\"\"\n            SELECT user_id FROM sessions \n            WHERE session_token = ? AND expires_at > ?\n        \"\"\", (session_token, datetime.now()))\n        \n        result = cursor.fetchone()\n        conn.close()\n        \n        return result[0] if result else None",
            "docstring": "Validate a session token and return user_id if valid."
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 101,
            "line_end": 101,
            "metadata": {
              "class": "SessionManager",
              "type": "self.db_manager.get_connection"
            },
            "content": "        conn = self.db_manager.get_connection()",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 102,
            "line_end": 102,
            "metadata": {
              "class": "SessionManager",
              "type": "conn.cursor"
            },
            "content": "        cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 109,
            "line_end": 109,
            "metadata": {
              "class": "SessionManager",
              "type": "cursor.fetchone"
            },
            "content": "        result = cursor.fetchone()",
            "docstring": null
          },
          {
            "name": "invalidate_session",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 114,
            "line_end": 122,
            "metadata": {
              "args": [
                "self",
                "session_token"
              ],
              "decorators": [],
              "class": "SessionManager"
            },
            "content": "    def invalidate_session(self, session_token: str):\n        \"\"\"Invalidate a session token.\"\"\"\n        conn = self.db_manager.get_connection()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"DELETE FROM sessions WHERE session_token = ?\", (session_token,))\n        \n        conn.commit()\n        conn.close()",
            "docstring": "Invalidate a session token."
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 116,
            "line_end": 116,
            "metadata": {
              "class": "SessionManager",
              "type": "self.db_manager.get_connection"
            },
            "content": "        conn = self.db_manager.get_connection()",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 117,
            "line_end": 117,
            "metadata": {
              "class": "SessionManager",
              "type": "conn.cursor"
            },
            "content": "        cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "UserManager",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 125,
            "line_end": 219,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class UserManager:\n    \"\"\"Manages user operations like registration and authentication.\"\"\"\n    \n    def __init__(self, db_manager: DatabaseManager):\n        self.db_manager = db_manager\n        self.session_manager = SessionManager(db_manager)\n    \n    def register_user(self, username: str, email: str, password: str) -> Dict:\n        \"\"\"Register a new user.\"\"\"\n        # Validate input\n        if not username or not email or not password:\n            return {\"success\": False, \"error\": \"All fields are required\"}\n        \n        if len(password) < 8:\n            return {\"success\": False, \"error\": \"Password must be at least 8 characters\"}\n        \n        # Hash password\n        password_hash = PasswordManager.hash_password(password)\n        \n        try:\n            conn = self.db_manager.get_connection()\n            cursor = conn.cursor()\n            \n            cursor.execute(\"\"\"\n                INSERT INTO users (username, email, password_hash)\n                VALUES (?, ?, ?)\n      ...",
            "docstring": "Manages user operations like registration and authentication."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 128,
            "line_end": 130,
            "metadata": {
              "args": [
                "self",
                "db_manager"
              ],
              "decorators": [],
              "class": "UserManager"
            },
            "content": "    def __init__(self, db_manager: DatabaseManager):\n        self.db_manager = db_manager\n        self.session_manager = SessionManager(db_manager)",
            "docstring": null
          },
          {
            "name": "register_user",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 132,
            "line_end": 165,
            "metadata": {
              "args": [
                "self",
                "username",
                "email",
                "password"
              ],
              "decorators": [],
              "class": "UserManager"
            },
            "content": "    def register_user(self, username: str, email: str, password: str) -> Dict:\n        \"\"\"Register a new user.\"\"\"\n        # Validate input\n        if not username or not email or not password:\n            return {\"success\": False, \"error\": \"All fields are required\"}\n        \n        if len(password) < 8:\n            return {\"success\": False, \"error\": \"Password must be at least 8 characters\"}\n        \n        # Hash password\n        password_hash = PasswordManager.hash_password(password)\n        \n        try:\n            conn = self.db_manager.get_connection()\n            cursor = conn.cursor()\n            \n            cursor.execute(\"\"\"\n                INSERT INTO users (username, email, password_hash)\n                VALUES (?, ?, ?)\n            \"\"\", (username, email, password_hash))\n            \n            user_id = cursor.lastrowid\n            conn.commit()\n            conn.close()\n            \n            return {\"success\": True, \"user_id\": user_id}\n            \n        except sql...",
            "docstring": "Register a new user."
          },
          {
            "name": "password_hash",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 142,
            "line_end": 142,
            "metadata": {
              "class": "UserManager",
              "type": "PasswordManager.hash_password"
            },
            "content": "        password_hash = PasswordManager.hash_password(password)",
            "docstring": null
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 145,
            "line_end": 145,
            "metadata": {
              "class": "UserManager",
              "type": "self.db_manager.get_connection"
            },
            "content": "            conn = self.db_manager.get_connection()",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 146,
            "line_end": 146,
            "metadata": {
              "class": "UserManager",
              "type": "conn.cursor"
            },
            "content": "            cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "user_id",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 153,
            "line_end": 153,
            "metadata": {
              "class": "UserManager",
              "type": "unknown"
            },
            "content": "            user_id = cursor.lastrowid",
            "docstring": null
          },
          {
            "name": "authenticate_user",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 167,
            "line_end": 195,
            "metadata": {
              "args": [
                "self",
                "username",
                "password"
              ],
              "decorators": [],
              "class": "UserManager"
            },
            "content": "    def authenticate_user(self, username: str, password: str) -> Dict:\n        \"\"\"Authenticate a user and create a session.\"\"\"\n        conn = self.db_manager.get_connection()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"\"\"\n            SELECT id, password_hash FROM users \n            WHERE username = ? AND is_active = TRUE\n        \"\"\", (username,))\n        \n        result = cursor.fetchone()\n        conn.close()\n        \n        if not result:\n            return {\"success\": False, \"error\": \"Invalid username or password\"}\n        \n        user_id, stored_hash = result\n        \n        if not PasswordManager.verify_password(password, stored_hash):\n            return {\"success\": False, \"error\": \"Invalid username or password\"}\n        \n        # Create session\n        session_token = self.session_manager.create_session(user_id)\n        \n        return {\n            \"success\": True,\n            \"user_id\": user_id,\n            \"session_token\": session_token\n        }",
            "docstring": "Authenticate a user and create a session."
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 169,
            "line_end": 169,
            "metadata": {
              "class": "UserManager",
              "type": "self.db_manager.get_connection"
            },
            "content": "        conn = self.db_manager.get_connection()",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 170,
            "line_end": 170,
            "metadata": {
              "class": "UserManager",
              "type": "conn.cursor"
            },
            "content": "        cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 177,
            "line_end": 177,
            "metadata": {
              "class": "UserManager",
              "type": "cursor.fetchone"
            },
            "content": "        result = cursor.fetchone()",
            "docstring": null
          },
          {
            "name": "session_token",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 189,
            "line_end": 189,
            "metadata": {
              "class": "UserManager",
              "type": "self.session_manager.create_session"
            },
            "content": "        session_token = self.session_manager.create_session(user_id)",
            "docstring": null
          },
          {
            "name": "get_user_profile",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 197,
            "line_end": 219,
            "metadata": {
              "args": [
                "self",
                "user_id"
              ],
              "decorators": [],
              "class": "UserManager"
            },
            "content": "    def get_user_profile(self, user_id: int) -> Optional[Dict]:\n        \"\"\"Get user profile information.\"\"\"\n        conn = self.db_manager.get_connection()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"\"\"\n            SELECT id, username, email, created_at, is_active\n            FROM users WHERE id = ?\n        \"\"\", (user_id,))\n        \n        result = cursor.fetchone()\n        conn.close()\n        \n        if result:\n            return {\n                \"id\": result[0],\n                \"username\": result[1],\n                \"email\": result[2],\n                \"created_at\": result[3],\n                \"is_active\": result[4]\n            }\n        \n        return None",
            "docstring": "Get user profile information."
          },
          {
            "name": "conn",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 199,
            "line_end": 199,
            "metadata": {
              "class": "UserManager",
              "type": "self.db_manager.get_connection"
            },
            "content": "        conn = self.db_manager.get_connection()",
            "docstring": null
          },
          {
            "name": "cursor",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 200,
            "line_end": 200,
            "metadata": {
              "class": "UserManager",
              "type": "conn.cursor"
            },
            "content": "        cursor = conn.cursor()",
            "docstring": null
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 207,
            "line_end": 207,
            "metadata": {
              "class": "UserManager",
              "type": "cursor.fetchone"
            },
            "content": "        result = cursor.fetchone()",
            "docstring": null
          },
          {
            "name": "APIHandler",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 222,
            "line_end": 261,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class APIHandler:\n    \"\"\"Handles API requests for the web application.\"\"\"\n    \n    def __init__(self):\n        self.db_manager = DatabaseManager()\n        self.user_manager = UserManager(self.db_manager)\n    \n    def handle_register(self, request_data: Dict) -> Dict:\n        \"\"\"Handle user registration request.\"\"\"\n        username = request_data.get(\"username\", \"\").strip()\n        email = request_data.get(\"email\", \"\").strip()\n        password = request_data.get(\"password\", \"\")\n        \n        return self.user_manager.register_user(username, email, password)\n    \n    def handle_login(self, request_data: Dict) -> Dict:\n        \"\"\"Handle user login request.\"\"\"\n        username = request_data.get(\"username\", \"\").strip()\n        password = request_data.get(\"password\", \"\")\n        \n        return self.user_manager.authenticate_user(username, password)\n    \n    def handle_profile(self, session_token: str) -> Dict:\n        \"\"\"Handle profile request.\"\"\"\n        user_id = self.user_manager.sess...",
            "docstring": "Handles API requests for the web application."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 225,
            "line_end": 227,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "APIHandler"
            },
            "content": "    def __init__(self):\n        self.db_manager = DatabaseManager()\n        self.user_manager = UserManager(self.db_manager)",
            "docstring": null
          },
          {
            "name": "handle_register",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 229,
            "line_end": 235,
            "metadata": {
              "args": [
                "self",
                "request_data"
              ],
              "decorators": [],
              "class": "APIHandler"
            },
            "content": "    def handle_register(self, request_data: Dict) -> Dict:\n        \"\"\"Handle user registration request.\"\"\"\n        username = request_data.get(\"username\", \"\").strip()\n        email = request_data.get(\"email\", \"\").strip()\n        password = request_data.get(\"password\", \"\")\n        \n        return self.user_manager.register_user(username, email, password)",
            "docstring": "Handle user registration request."
          },
          {
            "name": "username",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 231,
            "line_end": 231,
            "metadata": {
              "class": "APIHandler",
              "type": "<ast.Call object at 0x7fb87a0f3f10>.strip"
            },
            "content": "        username = request_data.get(\"username\", \"\").strip()",
            "docstring": null
          },
          {
            "name": "email",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 232,
            "line_end": 232,
            "metadata": {
              "class": "APIHandler",
              "type": "<ast.Call object at 0x7fb87a13ae50>.strip"
            },
            "content": "        email = request_data.get(\"email\", \"\").strip()",
            "docstring": null
          },
          {
            "name": "password",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 233,
            "line_end": 233,
            "metadata": {
              "class": "APIHandler",
              "type": "request_data.get"
            },
            "content": "        password = request_data.get(\"password\", \"\")",
            "docstring": null
          },
          {
            "name": "handle_login",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 237,
            "line_end": 242,
            "metadata": {
              "args": [
                "self",
                "request_data"
              ],
              "decorators": [],
              "class": "APIHandler"
            },
            "content": "    def handle_login(self, request_data: Dict) -> Dict:\n        \"\"\"Handle user login request.\"\"\"\n        username = request_data.get(\"username\", \"\").strip()\n        password = request_data.get(\"password\", \"\")\n        \n        return self.user_manager.authenticate_user(username, password)",
            "docstring": "Handle user login request."
          },
          {
            "name": "username",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 239,
            "line_end": 239,
            "metadata": {
              "class": "APIHandler",
              "type": "<ast.Call object at 0x7fb87a286750>.strip"
            },
            "content": "        username = request_data.get(\"username\", \"\").strip()",
            "docstring": null
          },
          {
            "name": "password",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 240,
            "line_end": 240,
            "metadata": {
              "class": "APIHandler",
              "type": "request_data.get"
            },
            "content": "        password = request_data.get(\"password\", \"\")",
            "docstring": null
          },
          {
            "name": "handle_profile",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 244,
            "line_end": 256,
            "metadata": {
              "args": [
                "self",
                "session_token"
              ],
              "decorators": [],
              "class": "APIHandler"
            },
            "content": "    def handle_profile(self, session_token: str) -> Dict:\n        \"\"\"Handle profile request.\"\"\"\n        user_id = self.user_manager.session_manager.validate_session(session_token)\n        \n        if not user_id:\n            return {\"success\": False, \"error\": \"Invalid or expired session\"}\n        \n        profile = self.user_manager.get_user_profile(user_id)\n        \n        if profile:\n            return {\"success\": True, \"profile\": profile}\n        else:\n            return {\"success\": False, \"error\": \"User not found\"}",
            "docstring": "Handle profile request."
          },
          {
            "name": "user_id",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 246,
            "line_end": 246,
            "metadata": {
              "class": "APIHandler",
              "type": "self.user_manager.session_manager.validate_session"
            },
            "content": "        user_id = self.user_manager.session_manager.validate_session(session_token)",
            "docstring": null
          },
          {
            "name": "profile",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 251,
            "line_end": 251,
            "metadata": {
              "class": "APIHandler",
              "type": "self.user_manager.get_user_profile"
            },
            "content": "        profile = self.user_manager.get_user_profile(user_id)",
            "docstring": null
          },
          {
            "name": "handle_logout",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 258,
            "line_end": 261,
            "metadata": {
              "args": [
                "self",
                "session_token"
              ],
              "decorators": [],
              "class": "APIHandler"
            },
            "content": "    def handle_logout(self, session_token: str) -> Dict:\n        \"\"\"Handle logout request.\"\"\"\n        self.user_manager.session_manager.invalidate_session(session_token)\n        return {\"success\": True, \"message\": \"Logged out successfully\"}",
            "docstring": "Handle logout request."
          },
          {
            "name": "api",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 267,
            "line_end": 267,
            "metadata": {
              "class": null,
              "type": "APIHandler"
            },
            "content": "    api = APIHandler()",
            "docstring": null
          },
          {
            "name": "register_result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 271,
            "line_end": 271,
            "metadata": {
              "class": null,
              "type": "api.handle_register"
            },
            "content": "    register_result = api.handle_register({\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"password\": \"securepassword123\"\n    })",
            "docstring": null
          },
          {
            "name": "login_result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 280,
            "line_end": 280,
            "metadata": {
              "class": null,
              "type": "api.handle_login"
            },
            "content": "    login_result = api.handle_login({\n        \"username\": \"testuser\",\n        \"password\": \"securepassword123\"\n    })",
            "docstring": null
          },
          {
            "name": "session_token",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 287,
            "line_end": 287,
            "metadata": {
              "class": null,
              "type": "unknown"
            },
            "content": "        session_token = login_result[\"session_token\"]",
            "docstring": null
          },
          {
            "name": "profile_result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 291,
            "line_end": 291,
            "metadata": {
              "class": null,
              "type": "api.handle_profile"
            },
            "content": "        profile_result = api.handle_profile(session_token)",
            "docstring": null
          },
          {
            "name": "logout_result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/sample_app.py",
            "line_start": 296,
            "line_end": 296,
            "metadata": {
              "class": null,
              "type": "api.handle_logout"
            },
            "content": "        logout_result = api.handle_logout(session_token)",
            "docstring": null
          }
        ],
        "parser_used": {
          "name": "Python",
          "version": "1.0.0",
          "supported_extensions": [
            ".pyw",
            ".py",
            ".pyi"
          ],
          "entity_types": [
            "file",
            "class",
            "function",
            "method",
            "variable",
            "import",
            "module"
          ]
        }
      },
      "duration": 0.027150869369506836
    },
    "utils.py": {
      "success": true,
      "result": {
        "file_path": "/workspace/coretx_test_project/utils.py",
        "entities_found": 56,
        "entities": [
          {
            "name": "utils.py",
            "type": "file",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 1,
            "line_end": 272,
            "metadata": {
              "language": "python",
              "size": 7508
            },
            "content": "\"\"\"\nUtility functions for the sample application.\n\"\"\"\n\nimport re\nimport json\nimport logging\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Optional\n\n\ndef setup_logging(log_level: str = \"INFO\") -> logging.Logger:\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(\n        level=getattr(logging, log_level.upper()),\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    )\n    return logging.getLogger(__name__)\n\n...",
            "docstring": null
          },
          {
            "name": "re",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 5,
            "line_end": 5,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import re",
            "docstring": null
          },
          {
            "name": "json",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 6,
            "line_end": 6,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import json",
            "docstring": null
          },
          {
            "name": "logging",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 7,
            "line_end": 7,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import logging",
            "docstring": null
          },
          {
            "name": "datetime.datetime",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 8,
            "line_end": 8,
            "metadata": {
              "module": "datetime",
              "name": "datetime",
              "alias": null,
              "type": "from_import"
            },
            "content": "from datetime import datetime",
            "docstring": null
          },
          {
            "name": "typing.Any",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "typing",
              "name": "Any",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Any, Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "typing.Dict",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Any, Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "typing.List",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "typing",
              "name": "List",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Any, Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "typing.Optional",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "typing",
              "name": "Optional",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Any, Dict, List, Optional",
            "docstring": null
          },
          {
            "name": "setup_logging",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 12,
            "line_end": 19,
            "metadata": {
              "args": [
                "log_level"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def setup_logging(log_level: str = \"INFO\") -> logging.Logger:\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(\n        level=getattr(logging, log_level.upper()),\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    )\n    return logging.getLogger(__name__)",
            "docstring": "Set up logging configuration."
          },
          {
            "name": "validate_email",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 22,
            "line_end": 25,
            "metadata": {
              "args": [
                "email"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def validate_email(email: str) -> bool:\n    \"\"\"Validate email format using regex.\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None",
            "docstring": "Validate email format using regex."
          },
          {
            "name": "pattern",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 24,
            "line_end": 24,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'",
            "docstring": null
          },
          {
            "name": "validate_username",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 28,
            "line_end": 32,
            "metadata": {
              "args": [
                "username"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def validate_username(username: str) -> bool:\n    \"\"\"Validate username format.\"\"\"\n    # Username should be 3-20 characters, alphanumeric and underscores only\n    pattern = r'^[a-zA-Z0-9_]{3,20}$'\n    return re.match(pattern, username) is not None",
            "docstring": "Validate username format."
          },
          {
            "name": "pattern",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 31,
            "line_end": 31,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "    pattern = r'^[a-zA-Z0-9_]{3,20}$'",
            "docstring": null
          },
          {
            "name": "sanitize_input",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 35,
            "line_end": 47,
            "metadata": {
              "args": [
                "input_string"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def sanitize_input(input_string: str) -> str:\n    \"\"\"Sanitize user input to prevent basic injection attacks.\"\"\"\n    if not isinstance(input_string, str):\n        return \"\"\n    \n    # Remove potentially dangerous characters\n    dangerous_chars = ['<', '>', '\"', \"'\", '&', ';', '(', ')', '|', '`']\n    sanitized = input_string\n    \n    for char in dangerous_chars:\n        sanitized = sanitized.replace(char, '')\n    \n    return sanitized.strip()",
            "docstring": "Sanitize user input to prevent basic injection attacks."
          },
          {
            "name": "dangerous_chars",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 41,
            "line_end": 41,
            "metadata": {
              "class": null,
              "type": "list"
            },
            "content": "    dangerous_chars = ['<', '>', '\"', \"'\", '&', ';', '(', ')', '|', '`']",
            "docstring": null
          },
          {
            "name": "sanitized",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 42,
            "line_end": 42,
            "metadata": {
              "class": null,
              "type": "unknown"
            },
            "content": "    sanitized = input_string",
            "docstring": null
          },
          {
            "name": "sanitized",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 45,
            "line_end": 45,
            "metadata": {
              "class": null,
              "type": "sanitized.replace"
            },
            "content": "        sanitized = sanitized.replace(char, '')",
            "docstring": null
          },
          {
            "name": "format_datetime",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 50,
            "line_end": 52,
            "metadata": {
              "args": [
                "dt"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def format_datetime(dt: datetime) -> str:\n    \"\"\"Format datetime for display.\"\"\"\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")",
            "docstring": "Format datetime for display."
          },
          {
            "name": "parse_json_safely",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 55,
            "line_end": 60,
            "metadata": {
              "args": [
                "json_string"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def parse_json_safely(json_string: str) -> Optional[Dict]:\n    \"\"\"Safely parse JSON string.\"\"\"\n    try:\n        return json.loads(json_string)\n    except (json.JSONDecodeError, TypeError):\n        return None",
            "docstring": "Safely parse JSON string."
          },
          {
            "name": "generate_response",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 63,
            "line_end": 75,
            "metadata": {
              "args": [
                "success",
                "data",
                "error"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def generate_response(success: bool, data: Any = None, error: str = None) -> Dict:\n    \"\"\"Generate standardized API response.\"\"\"\n    response = {\"success\": success}\n    \n    if success and data is not None:\n        response[\"data\"] = data\n    \n    if not success and error:\n        response[\"error\"] = error\n    \n    response[\"timestamp\"] = datetime.now().isoformat()\n    \n    return response",
            "docstring": "Generate standardized API response."
          },
          {
            "name": "response",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 65,
            "line_end": 65,
            "metadata": {
              "class": null,
              "type": "dict"
            },
            "content": "    response = {\"success\": success}",
            "docstring": null
          },
          {
            "name": "calculate_password_strength",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 78,
            "line_end": 126,
            "metadata": {
              "args": [
                "password"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def calculate_password_strength(password: str) -> Dict:\n    \"\"\"Calculate password strength score.\"\"\"\n    score = 0\n    feedback = []\n    \n    # Length check\n    if len(password) >= 8:\n        score += 2\n    elif len(password) >= 6:\n        score += 1\n    else:\n        feedback.append(\"Password should be at least 8 characters long\")\n    \n    # Character variety checks\n    if re.search(r'[a-z]', password):\n        score += 1\n    else:\n        feedback.append(\"Add lowercase letters\")\n    \n    if re.search(r'[A-Z]', password):\n        score += 1\n    else:\n        feedback.append(\"Add uppercase letters\")\n    \n    if re.search(r'\\d', password):\n        score += 1\n    else:\n        feedback.append(\"Add numbers\")\n    \n    if re.search(r'[!@#$%^&*(),.?\":{}|<>]', password):\n        score += 2\n    else:\n        feedback.append(\"Add special characters\")\n    \n    # Determine strength level\n    if score >= 7:\n        strength = \"Strong\"\n    elif score >= 5:\n        strength = \"Medium\"\n    elif score...",
            "docstring": "Calculate password strength score."
          },
          {
            "name": "score",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 80,
            "line_end": 80,
            "metadata": {
              "class": null,
              "type": "int"
            },
            "content": "    score = 0",
            "docstring": null
          },
          {
            "name": "feedback",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 81,
            "line_end": 81,
            "metadata": {
              "class": null,
              "type": "list"
            },
            "content": "    feedback = []",
            "docstring": null
          },
          {
            "name": "strength",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 114,
            "line_end": 114,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "        strength = \"Strong\"",
            "docstring": null
          },
          {
            "name": "strength",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 116,
            "line_end": 116,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "        strength = \"Medium\"",
            "docstring": null
          },
          {
            "name": "strength",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 118,
            "line_end": 118,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "        strength = \"Weak\"",
            "docstring": null
          },
          {
            "name": "strength",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 120,
            "line_end": 120,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "        strength = \"Very Weak\"",
            "docstring": null
          },
          {
            "name": "rate_limit_check",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 129,
            "line_end": 141,
            "metadata": {
              "args": [
                "user_id",
                "action",
                "max_attempts",
                "time_window"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def rate_limit_check(user_id: int, action: str, max_attempts: int = 5, \n                    time_window: int = 300) -> bool:\n    \"\"\"\n    Simple rate limiting check.\n    In a real application, this would use Redis or similar.\n    \"\"\"\n    # This is a simplified implementation\n    # In production, you'd want to use a proper rate limiting solution\n    import time\n    \n    # For demo purposes, we'll just return True\n    # Real implementation would track attempts per user/action\n    return True",
            "docstring": "\n    Simple rate limiting check.\n    In a real application, this would use Redis or similar.\n    "
          },
          {
            "name": "time",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 137,
            "line_end": 137,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "    import time",
            "docstring": null
          },
          {
            "name": "ConfigManager",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 144,
            "line_end": 205,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class ConfigManager:\n    \"\"\"Manages application configuration.\"\"\"\n    \n    def __init__(self, config_file: str = \"config.json\"):\n        self.config_file = config_file\n        self.config = self.load_config()\n    \n    def load_config(self) -> Dict:\n        \"\"\"Load configuration from file.\"\"\"\n        try:\n            with open(self.config_file, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            # Return default configuration\n            return {\n                \"database\": {\n                    \"path\": \"app.db\",\n                    \"timeout\": 30\n                },\n                \"session\": {\n                    \"timeout_hours\": 24,\n                    \"cleanup_interval\": 3600\n                },\n                \"security\": {\n                    \"max_login_attempts\": 5,\n                    \"lockout_duration\": 900\n                },\n                \"logging\": {\n                    \"level\": \"INFO\",\n                    \"file\": \"app.log\"\n            ...",
            "docstring": "Manages application configuration."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 147,
            "line_end": 149,
            "metadata": {
              "args": [
                "self",
                "config_file"
              ],
              "decorators": [],
              "class": "ConfigManager"
            },
            "content": "    def __init__(self, config_file: str = \"config.json\"):\n        self.config_file = config_file\n        self.config = self.load_config()",
            "docstring": null
          },
          {
            "name": "load_config",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 151,
            "line_end": 175,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "ConfigManager"
            },
            "content": "    def load_config(self) -> Dict:\n        \"\"\"Load configuration from file.\"\"\"\n        try:\n            with open(self.config_file, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            # Return default configuration\n            return {\n                \"database\": {\n                    \"path\": \"app.db\",\n                    \"timeout\": 30\n                },\n                \"session\": {\n                    \"timeout_hours\": 24,\n                    \"cleanup_interval\": 3600\n                },\n                \"security\": {\n                    \"max_login_attempts\": 5,\n                    \"lockout_duration\": 900\n                },\n                \"logging\": {\n                    \"level\": \"INFO\",\n                    \"file\": \"app.log\"\n                }\n            }",
            "docstring": "Load configuration from file."
          },
          {
            "name": "get",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 177,
            "line_end": 188,
            "metadata": {
              "args": [
                "self",
                "key",
                "default"
              ],
              "decorators": [],
              "class": "ConfigManager"
            },
            "content": "    def get(self, key: str, default: Any = None) -> Any:\n        \"\"\"Get configuration value by key.\"\"\"\n        keys = key.split('.')\n        value = self.config\n        \n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n        \n        return value",
            "docstring": "Get configuration value by key."
          },
          {
            "name": "keys",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 179,
            "line_end": 179,
            "metadata": {
              "class": "ConfigManager",
              "type": "key.split"
            },
            "content": "        keys = key.split('.')",
            "docstring": null
          },
          {
            "name": "value",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 180,
            "line_end": 180,
            "metadata": {
              "class": "ConfigManager",
              "type": "unknown"
            },
            "content": "        value = self.config",
            "docstring": null
          },
          {
            "name": "value",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 184,
            "line_end": 184,
            "metadata": {
              "class": "ConfigManager",
              "type": "unknown"
            },
            "content": "                value = value[k]",
            "docstring": null
          },
          {
            "name": "set",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 190,
            "line_end": 200,
            "metadata": {
              "args": [
                "self",
                "key",
                "value"
              ],
              "decorators": [],
              "class": "ConfigManager"
            },
            "content": "    def set(self, key: str, value: Any):\n        \"\"\"Set configuration value.\"\"\"\n        keys = key.split('.')\n        config = self.config\n        \n        for k in keys[:-1]:\n            if k not in config:\n                config[k] = {}\n            config = config[k]\n        \n        config[keys[-1]] = value",
            "docstring": "Set configuration value."
          },
          {
            "name": "keys",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 192,
            "line_end": 192,
            "metadata": {
              "class": "ConfigManager",
              "type": "key.split"
            },
            "content": "        keys = key.split('.')",
            "docstring": null
          },
          {
            "name": "config",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 193,
            "line_end": 193,
            "metadata": {
              "class": "ConfigManager",
              "type": "unknown"
            },
            "content": "        config = self.config",
            "docstring": null
          },
          {
            "name": "config",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 198,
            "line_end": 198,
            "metadata": {
              "class": "ConfigManager",
              "type": "unknown"
            },
            "content": "            config = config[k]",
            "docstring": null
          },
          {
            "name": "save_config",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 202,
            "line_end": 205,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "ConfigManager"
            },
            "content": "    def save_config(self):\n        \"\"\"Save configuration to file.\"\"\"\n        with open(self.config_file, 'w') as f:\n            json.dump(self.config, f, indent=2)",
            "docstring": "Save configuration to file."
          },
          {
            "name": "DataValidator",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 208,
            "line_end": 241,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class DataValidator:\n    \"\"\"Validates various types of data.\"\"\"\n    \n    @staticmethod\n    def validate_user_data(data: Dict) -> List[str]:\n        \"\"\"Validate user registration/update data.\"\"\"\n        errors = []\n        \n        username = data.get('username', '')\n        email = data.get('email', '')\n        password = data.get('password', '')\n        \n        if not validate_username(username):\n            errors.append(\"Username must be 3-20 characters, alphanumeric and underscores only\")\n        \n        if not validate_email(email):\n            errors.append(\"Invalid email format\")\n        \n        if len(password) < 8:\n            errors.append(\"Password must be at least 8 characters long\")\n        \n        return errors\n    \n    @staticmethod\n    def validate_session_data(data: Dict) -> List[str]:\n        \"\"\"Validate session-related data.\"\"\"\n        errors = []\n        \n        session_token = data.get('session_token', '')\n        \n        if not session_token or len(session_t...",
            "docstring": "Validates various types of data."
          },
          {
            "name": "validate_user_data",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 212,
            "line_end": 229,
            "metadata": {
              "args": [
                "data"
              ],
              "decorators": [
                "staticmethod"
              ],
              "class": "DataValidator"
            },
            "content": "    def validate_user_data(data: Dict) -> List[str]:\n        \"\"\"Validate user registration/update data.\"\"\"\n        errors = []\n        \n        username = data.get('username', '')\n        email = data.get('email', '')\n        password = data.get('password', '')\n        \n        if not validate_username(username):\n            errors.append(\"Username must be 3-20 characters, alphanumeric and underscores only\")\n        \n        if not validate_email(email):\n            errors.append(\"Invalid email format\")\n        \n        if len(password) < 8:\n            errors.append(\"Password must be at least 8 characters long\")\n        \n        return errors",
            "docstring": "Validate user registration/update data."
          },
          {
            "name": "errors",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 214,
            "line_end": 214,
            "metadata": {
              "class": "DataValidator",
              "type": "list"
            },
            "content": "        errors = []",
            "docstring": null
          },
          {
            "name": "username",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 216,
            "line_end": 216,
            "metadata": {
              "class": "DataValidator",
              "type": "data.get"
            },
            "content": "        username = data.get('username', '')",
            "docstring": null
          },
          {
            "name": "email",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 217,
            "line_end": 217,
            "metadata": {
              "class": "DataValidator",
              "type": "data.get"
            },
            "content": "        email = data.get('email', '')",
            "docstring": null
          },
          {
            "name": "password",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 218,
            "line_end": 218,
            "metadata": {
              "class": "DataValidator",
              "type": "data.get"
            },
            "content": "        password = data.get('password', '')",
            "docstring": null
          },
          {
            "name": "validate_session_data",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 232,
            "line_end": 241,
            "metadata": {
              "args": [
                "data"
              ],
              "decorators": [
                "staticmethod"
              ],
              "class": "DataValidator"
            },
            "content": "    def validate_session_data(data: Dict) -> List[str]:\n        \"\"\"Validate session-related data.\"\"\"\n        errors = []\n        \n        session_token = data.get('session_token', '')\n        \n        if not session_token or len(session_token) < 10:\n            errors.append(\"Invalid session token\")\n        \n        return errors",
            "docstring": "Validate session-related data."
          },
          {
            "name": "errors",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 234,
            "line_end": 234,
            "metadata": {
              "class": "DataValidator",
              "type": "list"
            },
            "content": "        errors = []",
            "docstring": null
          },
          {
            "name": "session_token",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 236,
            "line_end": 236,
            "metadata": {
              "class": "DataValidator",
              "type": "data.get"
            },
            "content": "        session_token = data.get('session_token', '')",
            "docstring": null
          },
          {
            "name": "create_test_data",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 245,
            "line_end": 260,
            "metadata": {
              "args": [],
              "decorators": [],
              "class": null
            },
            "content": "def create_test_data() -> Dict:\n    \"\"\"Create test data for development.\"\"\"\n    return {\n        \"users\": [\n            {\n                \"username\": \"admin\",\n                \"email\": \"admin@example.com\",\n                \"password\": \"admin123456\"\n            },\n            {\n                \"username\": \"testuser\",\n                \"email\": \"test@example.com\",\n                \"password\": \"testpass123\"\n            }\n        ]\n    }",
            "docstring": "Create test data for development."
          },
          {
            "name": "cleanup_test_data",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 263,
            "line_end": 272,
            "metadata": {
              "args": [],
              "decorators": [],
              "class": null
            },
            "content": "def cleanup_test_data():\n    \"\"\"Clean up test data.\"\"\"\n    import os\n    \n    test_files = [\"app.db\", \"test.db\", \"app.log\"]\n    \n    for file in test_files:\n        if os.path.exists(file):\n            os.remove(file)\n            print(f\"Removed {file}\")",
            "docstring": "Clean up test data."
          },
          {
            "name": "os",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 265,
            "line_end": 265,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "    import os",
            "docstring": null
          },
          {
            "name": "test_files",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/utils.py",
            "line_start": 267,
            "line_end": 267,
            "metadata": {
              "class": null,
              "type": "list"
            },
            "content": "    test_files = [\"app.db\", \"test.db\", \"app.log\"]",
            "docstring": null
          }
        ],
        "parser_used": {
          "name": "Python",
          "version": "1.0.0",
          "supported_extensions": [
            ".pyw",
            ".py",
            ".pyi"
          ],
          "entity_types": [
            "file",
            "class",
            "function",
            "method",
            "variable",
            "import",
            "module"
          ]
        }
      },
      "duration": 0.023092269897460938
    },
    "web_server.py": {
      "success": true,
      "result": {
        "file_path": "/workspace/coretx_test_project/web_server.py",
        "entities_found": 57,
        "entities": [
          {
            "name": "web_server.py",
            "type": "file",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 1,
            "line_end": 317,
            "metadata": {
              "language": "python",
              "size": 12257
            },
            "content": "\"\"\"\nSimple web server for the sample application.\n\"\"\"\n\nimport json\nimport socket\nimport threading\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs\nfrom typing import Dict, Any\n\nfrom sample_app import APIHandler\nfrom utils import setup_logging, generate_response, parse_json_safely\n\n\nclass WebRequestHandler(BaseHTTPRequestHandler):\n    \"\"\"Handles HTTP requests for the web application.\"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        sel...",
            "docstring": null
          },
          {
            "name": "json",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 5,
            "line_end": 5,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import json",
            "docstring": null
          },
          {
            "name": "socket",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 6,
            "line_end": 6,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import socket",
            "docstring": null
          },
          {
            "name": "threading",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 7,
            "line_end": 7,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import threading",
            "docstring": null
          },
          {
            "name": "http.server.HTTPServer",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 8,
            "line_end": 8,
            "metadata": {
              "module": "http.server",
              "name": "HTTPServer",
              "alias": null,
              "type": "from_import"
            },
            "content": "from http.server import HTTPServer, BaseHTTPRequestHandler",
            "docstring": null
          },
          {
            "name": "http.server.BaseHTTPRequestHandler",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 8,
            "line_end": 8,
            "metadata": {
              "module": "http.server",
              "name": "BaseHTTPRequestHandler",
              "alias": null,
              "type": "from_import"
            },
            "content": "from http.server import HTTPServer, BaseHTTPRequestHandler",
            "docstring": null
          },
          {
            "name": "urllib.parse.urlparse",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "urllib.parse",
              "name": "urlparse",
              "alias": null,
              "type": "from_import"
            },
            "content": "from urllib.parse import urlparse, parse_qs",
            "docstring": null
          },
          {
            "name": "urllib.parse.parse_qs",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 9,
            "line_end": 9,
            "metadata": {
              "module": "urllib.parse",
              "name": "parse_qs",
              "alias": null,
              "type": "from_import"
            },
            "content": "from urllib.parse import urlparse, parse_qs",
            "docstring": null
          },
          {
            "name": "typing.Dict",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 10,
            "line_end": 10,
            "metadata": {
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, Any",
            "docstring": null
          },
          {
            "name": "typing.Any",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 10,
            "line_end": 10,
            "metadata": {
              "module": "typing",
              "name": "Any",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, Any",
            "docstring": null
          },
          {
            "name": "sample_app.APIHandler",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 12,
            "line_end": 12,
            "metadata": {
              "module": "sample_app",
              "name": "APIHandler",
              "alias": null,
              "type": "from_import"
            },
            "content": "from sample_app import APIHandler",
            "docstring": null
          },
          {
            "name": "utils.setup_logging",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 13,
            "line_end": 13,
            "metadata": {
              "module": "utils",
              "name": "setup_logging",
              "alias": null,
              "type": "from_import"
            },
            "content": "from utils import setup_logging, generate_response, parse_json_safely",
            "docstring": null
          },
          {
            "name": "utils.generate_response",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 13,
            "line_end": 13,
            "metadata": {
              "module": "utils",
              "name": "generate_response",
              "alias": null,
              "type": "from_import"
            },
            "content": "from utils import setup_logging, generate_response, parse_json_safely",
            "docstring": null
          },
          {
            "name": "utils.parse_json_safely",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 13,
            "line_end": 13,
            "metadata": {
              "module": "utils",
              "name": "parse_json_safely",
              "alias": null,
              "type": "from_import"
            },
            "content": "from utils import setup_logging, generate_response, parse_json_safely",
            "docstring": null
          },
          {
            "name": "WebRequestHandler",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 16,
            "line_end": 255,
            "metadata": {
              "bases": [
                "BaseHTTPRequestHandler"
              ],
              "decorators": []
            },
            "content": "class WebRequestHandler(BaseHTTPRequestHandler):\n    \"\"\"Handles HTTP requests for the web application.\"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        self.api_handler = APIHandler()\n        self.logger = setup_logging()\n        super().__init__(*args, **kwargs)\n    \n    def do_GET(self):\n        \"\"\"Handle GET requests.\"\"\"\n        parsed_url = urlparse(self.path)\n        path = parsed_url.path\n        \n        if path == '/':\n            self.serve_homepage()\n        elif path == '/health':\n            self.serve_health_check()\n        elif path == '/api/profile':\n            self.handle_profile_request()\n        else:\n            self.send_error(404, \"Not Found\")\n    \n    def do_POST(self):\n        \"\"\"Handle POST requests.\"\"\"\n        parsed_url = urlparse(self.path)\n        path = parsed_url.path\n        \n        # Read request body\n        content_length = int(self.headers.get('Content-Length', 0))\n        post_data = self.rfile.read(content_length).decode('utf-8')\n        \n...",
            "docstring": "Handles HTTP requests for the web application."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 19,
            "line_end": 22,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def __init__(self, *args, **kwargs):\n        self.api_handler = APIHandler()\n        self.logger = setup_logging()\n        super().__init__(*args, **kwargs)",
            "docstring": null
          },
          {
            "name": "do_GET",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 24,
            "line_end": 36,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def do_GET(self):\n        \"\"\"Handle GET requests.\"\"\"\n        parsed_url = urlparse(self.path)\n        path = parsed_url.path\n        \n        if path == '/':\n            self.serve_homepage()\n        elif path == '/health':\n            self.serve_health_check()\n        elif path == '/api/profile':\n            self.handle_profile_request()\n        else:\n            self.send_error(404, \"Not Found\")",
            "docstring": "Handle GET requests."
          },
          {
            "name": "parsed_url",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 26,
            "line_end": 26,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "urlparse"
            },
            "content": "        parsed_url = urlparse(self.path)",
            "docstring": null
          },
          {
            "name": "path",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 27,
            "line_end": 27,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "        path = parsed_url.path",
            "docstring": null
          },
          {
            "name": "do_POST",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 38,
            "line_end": 60,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def do_POST(self):\n        \"\"\"Handle POST requests.\"\"\"\n        parsed_url = urlparse(self.path)\n        path = parsed_url.path\n        \n        # Read request body\n        content_length = int(self.headers.get('Content-Length', 0))\n        post_data = self.rfile.read(content_length).decode('utf-8')\n        \n        try:\n            request_data = parse_json_safely(post_data) or {}\n        except Exception:\n            self.send_json_response(400, {\"error\": \"Invalid JSON\"})\n            return\n        \n        if path == '/api/register':\n            self.handle_register_request(request_data)\n        elif path == '/api/login':\n            self.handle_login_request(request_data)\n        elif path == '/api/logout':\n            self.handle_logout_request(request_data)\n        else:\n            self.send_error(404, \"Not Found\")",
            "docstring": "Handle POST requests."
          },
          {
            "name": "parsed_url",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 40,
            "line_end": 40,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "urlparse"
            },
            "content": "        parsed_url = urlparse(self.path)",
            "docstring": null
          },
          {
            "name": "path",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 41,
            "line_end": 41,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "        path = parsed_url.path",
            "docstring": null
          },
          {
            "name": "content_length",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 44,
            "line_end": 44,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "int"
            },
            "content": "        content_length = int(self.headers.get('Content-Length', 0))",
            "docstring": null
          },
          {
            "name": "post_data",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 45,
            "line_end": 45,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "<ast.Call object at 0x7fb87a0fcb10>.decode"
            },
            "content": "        post_data = self.rfile.read(content_length).decode('utf-8')",
            "docstring": null
          },
          {
            "name": "request_data",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 48,
            "line_end": 48,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "            request_data = parse_json_safely(post_data) or {}",
            "docstring": null
          },
          {
            "name": "serve_homepage",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 62,
            "line_end": 169,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def serve_homepage(self):\n        \"\"\"Serve the homepage.\"\"\"\n        html_content = \"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Sample App</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .container { max-width: 600px; margin: 0 auto; }\n                .form-group { margin: 15px 0; }\n                input, button { padding: 10px; margin: 5px; }\n                button { background: #007cba; color: white; border: none; cursor: pointer; }\n                .response { margin: 20px 0; padding: 10px; background: #f0f0f0; }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <h1>Sample Application</h1>\n                \n                <h2>Register</h2>\n                <div class=\"form-group\">\n                    <input type=\"text\" id=\"reg-username\" placeholder=\"Username\">\n                    <input type=\"email\" id=\"reg-email\" placeholder=\"Ema...",
            "docstring": "Serve the homepage."
          },
          {
            "name": "html_content",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 64,
            "line_end": 64,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "str"
            },
            "content": "        html_content = \"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Sample App</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .container { max-width: 600px; margin: 0 auto; }\n                .form-group { margin: 15px 0; }\n                input, button { padding: 10px; margin: 5px; }\n                button { background: #007cba; color: white; border: none; cursor: pointer; }\n                .response { margin: 20px 0; padding: 10px; background: #f0f0f0; }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <h1>Sample Application</h1>\n                \n                <h2>Register</h2>\n                <div class=\"form-group\">\n                    <input type=\"text\" id=\"reg-username\" placeholder=\"Username\">\n                    <input type=\"email\" id=\"reg-email\" placeholder=\"Email\">\n                    <input type=\"password\" id=\"reg-password...",
            "docstring": null
          },
          {
            "name": "serve_health_check",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 171,
            "line_end": 178,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def serve_health_check(self):\n        \"\"\"Serve health check endpoint.\"\"\"\n        response = {\n            \"status\": \"healthy\",\n            \"service\": \"sample-app\",\n            \"timestamp\": \"2024-01-01T00:00:00Z\"\n        }\n        self.send_json_response(200, response)",
            "docstring": "Serve health check endpoint."
          },
          {
            "name": "response",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 173,
            "line_end": 173,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "dict"
            },
            "content": "        response = {\n            \"status\": \"healthy\",\n            \"service\": \"sample-app\",\n            \"timestamp\": \"2024-01-01T00:00:00Z\"\n        }",
            "docstring": null
          },
          {
            "name": "handle_register_request",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 180,
            "line_end": 188,
            "metadata": {
              "args": [
                "self",
                "request_data"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def handle_register_request(self, request_data: Dict):\n        \"\"\"Handle user registration.\"\"\"\n        try:\n            result = self.api_handler.handle_register(request_data)\n            status_code = 200 if result.get(\"success\") else 400\n            self.send_json_response(status_code, result)\n        except Exception as e:\n            self.logger.error(f\"Registration error: {e}\")\n            self.send_json_response(500, {\"error\": \"Internal server error\"})",
            "docstring": "Handle user registration."
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 183,
            "line_end": 183,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "self.api_handler.handle_register"
            },
            "content": "            result = self.api_handler.handle_register(request_data)",
            "docstring": null
          },
          {
            "name": "status_code",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 184,
            "line_end": 184,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "            status_code = 200 if result.get(\"success\") else 400",
            "docstring": null
          },
          {
            "name": "handle_login_request",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 190,
            "line_end": 198,
            "metadata": {
              "args": [
                "self",
                "request_data"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def handle_login_request(self, request_data: Dict):\n        \"\"\"Handle user login.\"\"\"\n        try:\n            result = self.api_handler.handle_login(request_data)\n            status_code = 200 if result.get(\"success\") else 401\n            self.send_json_response(status_code, result)\n        except Exception as e:\n            self.logger.error(f\"Login error: {e}\")\n            self.send_json_response(500, {\"error\": \"Internal server error\"})",
            "docstring": "Handle user login."
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 193,
            "line_end": 193,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "self.api_handler.handle_login"
            },
            "content": "            result = self.api_handler.handle_login(request_data)",
            "docstring": null
          },
          {
            "name": "status_code",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 194,
            "line_end": 194,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "            status_code = 200 if result.get(\"success\") else 401",
            "docstring": null
          },
          {
            "name": "handle_profile_request",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 200,
            "line_end": 217,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def handle_profile_request(self):\n        \"\"\"Handle profile retrieval.\"\"\"\n        try:\n            # Get session token from query parameters\n            parsed_url = urlparse(self.path)\n            query_params = parse_qs(parsed_url.query)\n            session_token = query_params.get('session_token', [''])[0]\n            \n            if not session_token:\n                self.send_json_response(400, {\"error\": \"Session token required\"})\n                return\n            \n            result = self.api_handler.handle_profile(session_token)\n            status_code = 200 if result.get(\"success\") else 401\n            self.send_json_response(status_code, result)\n        except Exception as e:\n            self.logger.error(f\"Profile error: {e}\")\n            self.send_json_response(500, {\"error\": \"Internal server error\"})",
            "docstring": "Handle profile retrieval."
          },
          {
            "name": "parsed_url",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 204,
            "line_end": 204,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "urlparse"
            },
            "content": "            parsed_url = urlparse(self.path)",
            "docstring": null
          },
          {
            "name": "query_params",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 205,
            "line_end": 205,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "parse_qs"
            },
            "content": "            query_params = parse_qs(parsed_url.query)",
            "docstring": null
          },
          {
            "name": "session_token",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 206,
            "line_end": 206,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "            session_token = query_params.get('session_token', [''])[0]",
            "docstring": null
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 212,
            "line_end": 212,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "self.api_handler.handle_profile"
            },
            "content": "            result = self.api_handler.handle_profile(session_token)",
            "docstring": null
          },
          {
            "name": "status_code",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 213,
            "line_end": 213,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "unknown"
            },
            "content": "            status_code = 200 if result.get(\"success\") else 401",
            "docstring": null
          },
          {
            "name": "handle_logout_request",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 219,
            "line_end": 231,
            "metadata": {
              "args": [
                "self",
                "request_data"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def handle_logout_request(self, request_data: Dict):\n        \"\"\"Handle user logout.\"\"\"\n        try:\n            session_token = request_data.get('session_token', '')\n            if not session_token:\n                self.send_json_response(400, {\"error\": \"Session token required\"})\n                return\n            \n            result = self.api_handler.handle_logout(session_token)\n            self.send_json_response(200, result)\n        except Exception as e:\n            self.logger.error(f\"Logout error: {e}\")\n            self.send_json_response(500, {\"error\": \"Internal server error\"})",
            "docstring": "Handle user logout."
          },
          {
            "name": "session_token",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 222,
            "line_end": 222,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "request_data.get"
            },
            "content": "            session_token = request_data.get('session_token', '')",
            "docstring": null
          },
          {
            "name": "result",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 227,
            "line_end": 227,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "self.api_handler.handle_logout"
            },
            "content": "            result = self.api_handler.handle_logout(session_token)",
            "docstring": null
          },
          {
            "name": "send_json_response",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 233,
            "line_end": 243,
            "metadata": {
              "args": [
                "self",
                "status_code",
                "data"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def send_json_response(self, status_code: int, data: Dict):\n        \"\"\"Send JSON response.\"\"\"\n        self.send_response(status_code)\n        self.send_header('Content-type', 'application/json')\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        self.send_header('Access-Control-Allow-Headers', 'Content-Type')\n        self.end_headers()\n        \n        json_data = json.dumps(data, indent=2)\n        self.wfile.write(json_data.encode())",
            "docstring": "Send JSON response."
          },
          {
            "name": "json_data",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 242,
            "line_end": 242,
            "metadata": {
              "class": "WebRequestHandler",
              "type": "json.dumps"
            },
            "content": "        json_data = json.dumps(data, indent=2)",
            "docstring": null
          },
          {
            "name": "do_OPTIONS",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 245,
            "line_end": 251,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def do_OPTIONS(self):\n        \"\"\"Handle OPTIONS requests for CORS.\"\"\"\n        self.send_response(200)\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        self.send_header('Access-Control-Allow-Headers', 'Content-Type')\n        self.end_headers()",
            "docstring": "Handle OPTIONS requests for CORS."
          },
          {
            "name": "log_message",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 253,
            "line_end": 255,
            "metadata": {
              "args": [
                "self",
                "format"
              ],
              "decorators": [],
              "class": "WebRequestHandler"
            },
            "content": "    def log_message(self, format, *args):\n        \"\"\"Override to use our logger.\"\"\"\n        self.logger.info(f\"{self.address_string()} - {format % args}\")",
            "docstring": "Override to use our logger."
          },
          {
            "name": "WebServer",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 258,
            "line_end": 290,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class WebServer:\n    \"\"\"Web server wrapper class.\"\"\"\n    \n    def __init__(self, host: str = 'localhost', port: int = 8000):\n        self.host = host\n        self.port = port\n        self.server = None\n        self.logger = setup_logging()\n    \n    def start(self):\n        \"\"\"Start the web server.\"\"\"\n        try:\n            self.server = HTTPServer((self.host, self.port), WebRequestHandler)\n            self.logger.info(f\"Starting server on {self.host}:{self.port}\")\n            self.server.serve_forever()\n        except KeyboardInterrupt:\n            self.logger.info(\"Server interrupted by user\")\n            self.stop()\n        except Exception as e:\n            self.logger.error(f\"Server error: {e}\")\n    \n    def stop(self):\n        \"\"\"Stop the web server.\"\"\"\n        if self.server:\n            self.server.shutdown()\n            self.logger.info(\"Server stopped\")\n    \n    def start_in_thread(self):\n        \"\"\"Start server in a separate thread.\"\"\"\n        server_thread = threading.Thre...",
            "docstring": "Web server wrapper class."
          },
          {
            "name": "__init__",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 261,
            "line_end": 265,
            "metadata": {
              "args": [
                "self",
                "host",
                "port"
              ],
              "decorators": [],
              "class": "WebServer"
            },
            "content": "    def __init__(self, host: str = 'localhost', port: int = 8000):\n        self.host = host\n        self.port = port\n        self.server = None\n        self.logger = setup_logging()",
            "docstring": null
          },
          {
            "name": "start",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 267,
            "line_end": 277,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebServer"
            },
            "content": "    def start(self):\n        \"\"\"Start the web server.\"\"\"\n        try:\n            self.server = HTTPServer((self.host, self.port), WebRequestHandler)\n            self.logger.info(f\"Starting server on {self.host}:{self.port}\")\n            self.server.serve_forever()\n        except KeyboardInterrupt:\n            self.logger.info(\"Server interrupted by user\")\n            self.stop()\n        except Exception as e:\n            self.logger.error(f\"Server error: {e}\")",
            "docstring": "Start the web server."
          },
          {
            "name": "stop",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 279,
            "line_end": 283,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebServer"
            },
            "content": "    def stop(self):\n        \"\"\"Stop the web server.\"\"\"\n        if self.server:\n            self.server.shutdown()\n            self.logger.info(\"Server stopped\")",
            "docstring": "Stop the web server."
          },
          {
            "name": "start_in_thread",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 285,
            "line_end": 290,
            "metadata": {
              "args": [
                "self"
              ],
              "decorators": [],
              "class": "WebServer"
            },
            "content": "    def start_in_thread(self):\n        \"\"\"Start server in a separate thread.\"\"\"\n        server_thread = threading.Thread(target=self.start)\n        server_thread.daemon = True\n        server_thread.start()\n        return server_thread",
            "docstring": "Start server in a separate thread."
          },
          {
            "name": "server_thread",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 287,
            "line_end": 287,
            "metadata": {
              "class": "WebServer",
              "type": "threading.Thread"
            },
            "content": "        server_thread = threading.Thread(target=self.start)",
            "docstring": null
          },
          {
            "name": "find_free_port",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 293,
            "line_end": 302,
            "metadata": {
              "args": [
                "start_port"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def find_free_port(start_port: int = 8000) -> int:\n    \"\"\"Find a free port starting from the given port.\"\"\"\n    for port in range(start_port, start_port + 100):\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.bind(('localhost', port))\n                return port\n        except OSError:\n            continue\n    raise RuntimeError(\"No free ports available\")",
            "docstring": "Find a free port starting from the given port."
          },
          {
            "name": "port",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 307,
            "line_end": 307,
            "metadata": {
              "class": null,
              "type": "find_free_port"
            },
            "content": "    port = find_free_port()",
            "docstring": null
          },
          {
            "name": "server",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/web_server.py",
            "line_start": 308,
            "line_end": 308,
            "metadata": {
              "class": null,
              "type": "WebServer"
            },
            "content": "    server = WebServer(host='0.0.0.0', port=port)",
            "docstring": null
          }
        ],
        "parser_used": {
          "name": "Python",
          "version": "1.0.0",
          "supported_extensions": [
            ".pyw",
            ".py",
            ".pyi"
          ],
          "entity_types": [
            "file",
            "class",
            "function",
            "method",
            "variable",
            "import",
            "module"
          ]
        }
      },
      "duration": 0.024250507354736328
    },
    "config.py": {
      "success": true,
      "result": {
        "file_path": "/workspace/coretx_test_project/config.py",
        "entities_found": 43,
        "entities": [
          {
            "name": "config.py",
            "type": "file",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 1,
            "line_end": 133,
            "metadata": {
              "language": "python",
              "size": 3723
            },
            "content": "\"\"\"\nConfiguration settings for the sample application.\n\"\"\"\n\nimport os\nfrom typing import Dict, Any\n\n\nclass Config:\n    \"\"\"Base configuration class.\"\"\"\n    \n    # Database settings\n    DATABASE_PATH = os.getenv('DATABASE_PATH', 'app.db')\n    DATABASE_TIMEOUT = int(os.getenv('DATABASE_TIMEOUT', '30'))\n    \n    # Security settings\n    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')\n    PASSWORD_SALT = os.getenv('PASSWORD_SALT', 'app_salt_2024')\n    \n    # Session setting...",
            "docstring": null
          },
          {
            "name": "os",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 5,
            "line_end": 5,
            "metadata": {
              "alias": null,
              "type": "import"
            },
            "content": "import os",
            "docstring": null
          },
          {
            "name": "typing.Dict",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 6,
            "line_end": 6,
            "metadata": {
              "module": "typing",
              "name": "Dict",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, Any",
            "docstring": null
          },
          {
            "name": "typing.Any",
            "type": "import",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 6,
            "line_end": 6,
            "metadata": {
              "module": "typing",
              "name": "Any",
              "alias": null,
              "type": "from_import"
            },
            "content": "from typing import Dict, Any",
            "docstring": null
          },
          {
            "name": "Config",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 9,
            "line_end": 43,
            "metadata": {
              "bases": [],
              "decorators": []
            },
            "content": "class Config:\n    \"\"\"Base configuration class.\"\"\"\n    \n    # Database settings\n    DATABASE_PATH = os.getenv('DATABASE_PATH', 'app.db')\n    DATABASE_TIMEOUT = int(os.getenv('DATABASE_TIMEOUT', '30'))\n    \n    # Security settings\n    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')\n    PASSWORD_SALT = os.getenv('PASSWORD_SALT', 'app_salt_2024')\n    \n    # Session settings\n    SESSION_TIMEOUT_HOURS = int(os.getenv('SESSION_TIMEOUT_HOURS', '24'))\n    SESSION_CLEANUP_INTERVAL = int(os.getenv('SESSION_CLEANUP_INTERVAL', '3600'))\n    \n    # Rate limiting\n    MAX_LOGIN_ATTEMPTS = int(os.getenv('MAX_LOGIN_ATTEMPTS', '5'))\n    LOCKOUT_DURATION = int(os.getenv('LOCKOUT_DURATION', '900'))\n    \n    # Logging\n    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')\n    LOG_FILE = os.getenv('LOG_FILE', 'app.log')\n    \n    # Server settings\n    SERVER_HOST = os.getenv('SERVER_HOST', '0.0.0.0')\n    SERVER_PORT = int(os.getenv('SERVER_PORT', '8000'))\n    \n    @classmethod\n    def to_di...",
            "docstring": "Base configuration class."
          },
          {
            "name": "DATABASE_PATH",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 13,
            "line_end": 13,
            "metadata": {
              "class": "Config",
              "type": "os.getenv"
            },
            "content": "    DATABASE_PATH = os.getenv('DATABASE_PATH', 'app.db')",
            "docstring": null
          },
          {
            "name": "DATABASE_TIMEOUT",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 14,
            "line_end": 14,
            "metadata": {
              "class": "Config",
              "type": "int"
            },
            "content": "    DATABASE_TIMEOUT = int(os.getenv('DATABASE_TIMEOUT', '30'))",
            "docstring": null
          },
          {
            "name": "SECRET_KEY",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 17,
            "line_end": 17,
            "metadata": {
              "class": "Config",
              "type": "os.getenv"
            },
            "content": "    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')",
            "docstring": null
          },
          {
            "name": "PASSWORD_SALT",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 18,
            "line_end": 18,
            "metadata": {
              "class": "Config",
              "type": "os.getenv"
            },
            "content": "    PASSWORD_SALT = os.getenv('PASSWORD_SALT', 'app_salt_2024')",
            "docstring": null
          },
          {
            "name": "SESSION_TIMEOUT_HOURS",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 21,
            "line_end": 21,
            "metadata": {
              "class": "Config",
              "type": "int"
            },
            "content": "    SESSION_TIMEOUT_HOURS = int(os.getenv('SESSION_TIMEOUT_HOURS', '24'))",
            "docstring": null
          },
          {
            "name": "SESSION_CLEANUP_INTERVAL",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 22,
            "line_end": 22,
            "metadata": {
              "class": "Config",
              "type": "int"
            },
            "content": "    SESSION_CLEANUP_INTERVAL = int(os.getenv('SESSION_CLEANUP_INTERVAL', '3600'))",
            "docstring": null
          },
          {
            "name": "MAX_LOGIN_ATTEMPTS",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 25,
            "line_end": 25,
            "metadata": {
              "class": "Config",
              "type": "int"
            },
            "content": "    MAX_LOGIN_ATTEMPTS = int(os.getenv('MAX_LOGIN_ATTEMPTS', '5'))",
            "docstring": null
          },
          {
            "name": "LOCKOUT_DURATION",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 26,
            "line_end": 26,
            "metadata": {
              "class": "Config",
              "type": "int"
            },
            "content": "    LOCKOUT_DURATION = int(os.getenv('LOCKOUT_DURATION', '900'))",
            "docstring": null
          },
          {
            "name": "LOG_LEVEL",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 29,
            "line_end": 29,
            "metadata": {
              "class": "Config",
              "type": "os.getenv"
            },
            "content": "    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')",
            "docstring": null
          },
          {
            "name": "LOG_FILE",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 30,
            "line_end": 30,
            "metadata": {
              "class": "Config",
              "type": "os.getenv"
            },
            "content": "    LOG_FILE = os.getenv('LOG_FILE', 'app.log')",
            "docstring": null
          },
          {
            "name": "SERVER_HOST",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 33,
            "line_end": 33,
            "metadata": {
              "class": "Config",
              "type": "os.getenv"
            },
            "content": "    SERVER_HOST = os.getenv('SERVER_HOST', '0.0.0.0')",
            "docstring": null
          },
          {
            "name": "SERVER_PORT",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 34,
            "line_end": 34,
            "metadata": {
              "class": "Config",
              "type": "int"
            },
            "content": "    SERVER_PORT = int(os.getenv('SERVER_PORT', '8000'))",
            "docstring": null
          },
          {
            "name": "to_dict",
            "type": "method",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 37,
            "line_end": 43,
            "metadata": {
              "args": [
                "cls"
              ],
              "decorators": [
                "classmethod"
              ],
              "class": "Config"
            },
            "content": "    def to_dict(cls) -> Dict[str, Any]:\n        \"\"\"Convert configuration to dictionary.\"\"\"\n        return {\n            key: getattr(cls, key)\n            for key in dir(cls)\n            if not key.startswith('_') and not callable(getattr(cls, key))\n        }",
            "docstring": "Convert configuration to dictionary."
          },
          {
            "name": "DevelopmentConfig",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 46,
            "line_end": 51,
            "metadata": {
              "bases": [
                "Config"
              ],
              "decorators": []
            },
            "content": "class DevelopmentConfig(Config):\n    \"\"\"Development configuration.\"\"\"\n    \n    DEBUG = True\n    DATABASE_PATH = 'dev_app.db'\n    LOG_LEVEL = 'DEBUG'",
            "docstring": "Development configuration."
          },
          {
            "name": "DEBUG",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 49,
            "line_end": 49,
            "metadata": {
              "class": "DevelopmentConfig",
              "type": "bool"
            },
            "content": "    DEBUG = True",
            "docstring": null
          },
          {
            "name": "DATABASE_PATH",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 50,
            "line_end": 50,
            "metadata": {
              "class": "DevelopmentConfig",
              "type": "str"
            },
            "content": "    DATABASE_PATH = 'dev_app.db'",
            "docstring": null
          },
          {
            "name": "LOG_LEVEL",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 51,
            "line_end": 51,
            "metadata": {
              "class": "DevelopmentConfig",
              "type": "str"
            },
            "content": "    LOG_LEVEL = 'DEBUG'",
            "docstring": null
          },
          {
            "name": "ProductionConfig",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 54,
            "line_end": 64,
            "metadata": {
              "bases": [
                "Config"
              ],
              "decorators": []
            },
            "content": "class ProductionConfig(Config):\n    \"\"\"Production configuration.\"\"\"\n    \n    DEBUG = False\n    DATABASE_PATH = '/var/lib/app/app.db'\n    LOG_LEVEL = 'WARNING'\n    \n    # Override with more secure defaults\n    SESSION_TIMEOUT_HOURS = 8\n    MAX_LOGIN_ATTEMPTS = 3\n    LOCKOUT_DURATION = 1800",
            "docstring": "Production configuration."
          },
          {
            "name": "DEBUG",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 57,
            "line_end": 57,
            "metadata": {
              "class": "ProductionConfig",
              "type": "bool"
            },
            "content": "    DEBUG = False",
            "docstring": null
          },
          {
            "name": "DATABASE_PATH",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 58,
            "line_end": 58,
            "metadata": {
              "class": "ProductionConfig",
              "type": "str"
            },
            "content": "    DATABASE_PATH = '/var/lib/app/app.db'",
            "docstring": null
          },
          {
            "name": "LOG_LEVEL",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 59,
            "line_end": 59,
            "metadata": {
              "class": "ProductionConfig",
              "type": "str"
            },
            "content": "    LOG_LEVEL = 'WARNING'",
            "docstring": null
          },
          {
            "name": "SESSION_TIMEOUT_HOURS",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 62,
            "line_end": 62,
            "metadata": {
              "class": "ProductionConfig",
              "type": "int"
            },
            "content": "    SESSION_TIMEOUT_HOURS = 8",
            "docstring": null
          },
          {
            "name": "MAX_LOGIN_ATTEMPTS",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 63,
            "line_end": 63,
            "metadata": {
              "class": "ProductionConfig",
              "type": "int"
            },
            "content": "    MAX_LOGIN_ATTEMPTS = 3",
            "docstring": null
          },
          {
            "name": "LOCKOUT_DURATION",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 64,
            "line_end": 64,
            "metadata": {
              "class": "ProductionConfig",
              "type": "int"
            },
            "content": "    LOCKOUT_DURATION = 1800",
            "docstring": null
          },
          {
            "name": "TestConfig",
            "type": "class",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 67,
            "line_end": 73,
            "metadata": {
              "bases": [
                "Config"
              ],
              "decorators": []
            },
            "content": "class TestConfig(Config):\n    \"\"\"Test configuration.\"\"\"\n    \n    DEBUG = True\n    DATABASE_PATH = ':memory:'  # In-memory database for tests\n    LOG_LEVEL = 'ERROR'\n    SESSION_TIMEOUT_HOURS = 1",
            "docstring": "Test configuration."
          },
          {
            "name": "DEBUG",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 70,
            "line_end": 70,
            "metadata": {
              "class": "TestConfig",
              "type": "bool"
            },
            "content": "    DEBUG = True",
            "docstring": null
          },
          {
            "name": "DATABASE_PATH",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 71,
            "line_end": 71,
            "metadata": {
              "class": "TestConfig",
              "type": "str"
            },
            "content": "    DATABASE_PATH = ':memory:'  # In-memory database for tests",
            "docstring": null
          },
          {
            "name": "LOG_LEVEL",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 72,
            "line_end": 72,
            "metadata": {
              "class": "TestConfig",
              "type": "str"
            },
            "content": "    LOG_LEVEL = 'ERROR'",
            "docstring": null
          },
          {
            "name": "SESSION_TIMEOUT_HOURS",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 73,
            "line_end": 73,
            "metadata": {
              "class": "TestConfig",
              "type": "int"
            },
            "content": "    SESSION_TIMEOUT_HOURS = 1",
            "docstring": null
          },
          {
            "name": "get_config",
            "type": "function",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 76,
            "line_end": 87,
            "metadata": {
              "args": [
                "environment"
              ],
              "decorators": [],
              "class": null
            },
            "content": "def get_config(environment: str = None) -> Config:\n    \"\"\"Get configuration based on environment.\"\"\"\n    if environment is None:\n        environment = os.getenv('APP_ENV', 'development')\n    \n    config_map = {\n        'development': DevelopmentConfig,\n        'production': ProductionConfig,\n        'test': TestConfig\n    }\n    \n    return config_map.get(environment, DevelopmentConfig)",
            "docstring": "Get configuration based on environment."
          },
          {
            "name": "environment",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 79,
            "line_end": 79,
            "metadata": {
              "class": null,
              "type": "os.getenv"
            },
            "content": "        environment = os.getenv('APP_ENV', 'development')",
            "docstring": null
          },
          {
            "name": "config_map",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 81,
            "line_end": 81,
            "metadata": {
              "class": null,
              "type": "dict"
            },
            "content": "    config_map = {\n        'development': DevelopmentConfig,\n        'production': ProductionConfig,\n        'test': TestConfig\n    }",
            "docstring": null
          },
          {
            "name": "APP_NAME",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 91,
            "line_end": 91,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "APP_NAME = \"Sample Application\"",
            "docstring": null
          },
          {
            "name": "APP_VERSION",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 92,
            "line_end": 92,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "APP_VERSION = \"1.0.0\"",
            "docstring": null
          },
          {
            "name": "API_VERSION",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 93,
            "line_end": 93,
            "metadata": {
              "class": null,
              "type": "str"
            },
            "content": "API_VERSION = \"v1\"",
            "docstring": null
          },
          {
            "name": "ERROR_MESSAGES",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 96,
            "line_end": 96,
            "metadata": {
              "class": null,
              "type": "dict"
            },
            "content": "ERROR_MESSAGES = {\n    'INVALID_CREDENTIALS': 'Invalid username or password',\n    'USER_NOT_FOUND': 'User not found',\n    'USER_EXISTS': 'User already exists',\n    'INVALID_SESSION': 'Invalid or expired session',\n    'PERMISSION_DENIED': 'Permission denied',\n    'VALIDATION_ERROR': 'Validation error',\n    'INTERNAL_ERROR': 'Internal server error',\n    'RATE_LIMITED': 'Too many requests, please try again later'\n}",
            "docstring": null
          },
          {
            "name": "SUCCESS_MESSAGES",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 108,
            "line_end": 108,
            "metadata": {
              "class": null,
              "type": "dict"
            },
            "content": "SUCCESS_MESSAGES = {\n    'USER_REGISTERED': 'User registered successfully',\n    'LOGIN_SUCCESS': 'Login successful',\n    'LOGOUT_SUCCESS': 'Logout successful',\n    'PROFILE_UPDATED': 'Profile updated successfully',\n    'PASSWORD_CHANGED': 'Password changed successfully'\n}",
            "docstring": null
          },
          {
            "name": "VALIDATION_RULES",
            "type": "variable",
            "file_path": "/workspace/coretx_test_project/config.py",
            "line_start": 117,
            "line_end": 117,
            "metadata": {
              "class": null,
              "type": "dict"
            },
            "content": "VALIDATION_RULES = {\n    'username': {\n        'min_length': 3,\n        'max_length': 20,\n        'pattern': r'^[a-zA-Z0-9_]+$',\n        'message': 'Username must be 3-20 characters, alphanumeric and underscores only'\n    },\n    'email': {\n        'pattern': r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',\n        'message': 'Invalid email format'\n    },\n    'password': {\n        'min_length': 8,\n        'max_length': 128,\n        'message': 'Password must be 8-128 characters long'\n    }\n}",
            "docstring": null
          }
        ],
        "parser_used": {
          "name": "Python",
          "version": "1.0.0",
          "supported_extensions": [
            ".pyw",
            ".py",
            ".pyi"
          ],
          "entity_types": [
            "file",
            "class",
            "function",
            "method",
            "variable",
            "import",
            "module"
          ]
        }
      },
      "duration": 0.01870131492614746
    }
  },
  "entity_search": {
    "authentication": {
      "success": true,
      "result": {
        "query": "authentication",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.0019788742065429688
    },
    "password": {
      "success": true,
      "result": {
        "query": "password",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.002659320831298828
    },
    "session": {
      "success": true,
      "result": {
        "query": "session",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.0060803890228271484
    },
    "database": {
      "success": true,
      "result": {
        "query": "database",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.009486675262451172
    },
    "user": {
      "success": true,
      "result": {
        "query": "user",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.009905338287353516
    },
    "login": {
      "success": true,
      "result": {
        "query": "login",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.003078460693359375
    },
    "hash": {
      "success": true,
      "result": {
        "query": "hash",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.014101505279541016
    },
    "validate": {
      "success": true,
      "result": {
        "query": "validate",
        "results": [],
        "total_found": 0,
        "filters": {
          "entity_types": null,
          "languages": null
        },
        "supported_languages": [
          "python",
          "javascript",
          "markdown",
          "html",
          "css"
        ],
        "supported_extensions": [
          ".pyw",
          ".py",
          ".pyi",
          ".js",
          ".jsx",
          ".ts",
          ".mjs",
          ".tsx",
          ".mdown",
          ".mkd",
          ".markdown",
          ".md",
          ".html",
          ".xhtml",
          ".htm",
          ".scss",
          ".sass",
          ".css",
          ".less"
        ]
      },
      "duration": 0.003015279769897461
    }
  },
  "relationship_discovery": {
    "success": true,
    "result": {
      "directory_path": "/workspace/coretx_test_project",
      "total_entities": 387,
      "total_relationships": 202,
      "relationship_types": {
        "imports": 2,
        "documents": 200
      },
      "relationships": [
        {
          "type": "imports",
          "source": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "import_path": "sample_app"
          }
        },
        {
          "type": "imports",
          "source": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "import_path": "utils"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/test_coretx.py:results_file:361",
          "metadata": {
            "reference": "test_coretx.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/sample_app.py:logout_result:296",
          "metadata": {
            "reference": "sample_app.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/utils.py:test_files:267",
          "metadata": {
            "reference": "utils.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/web_server.py:server:308",
          "metadata": {
            "reference": "web_server.py"
          }
        },
        {
          "type": "documents",
          "source": "text_section:/workspace/coretx_test_project/README.md:section_Next Steps:190",
          "target": "variable:/workspace/coretx_test_project/config.py:VALIDATION_RULES:117",
          "metadata": {
            "reference": "config.py"
          }
        }
      ]
    },
    "duration": 0.0896449089050293
  }
}